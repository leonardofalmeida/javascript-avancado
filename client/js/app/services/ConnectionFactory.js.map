{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAW;AAClC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,SAAf;;AAEA,MAAIC,aAAa,IAAjB;;AAEA,MAAIC,QAAQ,IAAZ;;AAEA;AACE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAKyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;;AAEAA,yBAAWC,KAAX,GAAmB,YAAW;AAC5B,sBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD,eAFD;AAGD;;AAEDE,oBAAQJ,UAAR;AACD,WAbD;;AAeAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SA1BM,CAAP;AA2BD;AAjCH;AAAA;AAAA,mCAmCsBrB,UAnCtB,EAmCkC;AAC9BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACEzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACH,SAHD;AAIAzB,mBAAW2B,iBAAX,CAA6B9B,MAA7B,EAAqC,EAAE+B,eAAe,IAAjB,EAArC;AACD;AAzCH;AAAA;AAAA,yCA2C4B;AACxB,YAAI5B,UAAJ,EAAgB;AACdC;AACAD,uBAAa,IAAb;AACD;AACF;AAhDH;;AAAA;AAAA;AAkDD,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["/* Module Pattern, IIFE */\nvar ConnectionFactory = (function() {\n  const stores = [\"negociacoes\"];\n  const version = 4;\n  const dbName = \"cursojs\";\n\n  var connection = null;\n\n  var close = null;\n\n  return class ConnectionFactory {\n    constructor() {\n      throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n    }\n\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version);\n\n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStore(e.target.result);\n        };\n\n        openRequest.onsuccess = e => {\n          if (!connection) {\n            connection = e.target.result;\n\n            /* associa this ao connection, e não ao close */\n            close = connection.close.bind(connection);\n\n            connection.close = function() {\n              throw new Error(\"Você não pode fechar essa conexão diretamente.\");\n            };\n          }\n\n          resolve(connection);\n        };\n\n        openRequest.onerror = e => {\n          console.log(e.target.error);\n          reject(e.target.error.name);\n        };\n      });\n    }\n\n    static _createStore(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store))\n          connection.deleteObjectStore(store);\n      });\n      connection.createObjectStore(stores, { autoIncrement: true });\n    }\n\n    static _closeConnection() {\n      if (connection) {\n        close();\n        connection = null;\n      }\n    }\n  };\n})();\n"]}