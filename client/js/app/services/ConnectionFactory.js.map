{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,S;AAEXC,gB,GAAa,I;AAEbC,W,GAAQ,I;;mCAECC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD,mBAFD;AAGD;;AAEDE,wBAAQL,UAAR;AACD,eAbD;;AAeAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aA1BM,CAAP;AA2BD;;;uCAEmBtB,U,EAAY;AAC9BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACH,aAHD;AAIA1B,uBAAW4B,iBAAX,CAA6B/B,MAA7B,EAAqC,EAAEgC,eAAe,IAAjB,EAArC;AACD;;;6CAEyB;AACxB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\nconst version = 4;\nconst dbName = \"cursojs\";\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n  constructor() {\n    throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      let openRequest = window.indexedDB.open(dbName, version);\n\n      openRequest.onupgradeneeded = e => {\n        ConnectionFactory._createStore(e.target.result);\n      };\n\n      openRequest.onsuccess = e => {\n        if (!connection) {\n          connection = e.target.result;\n\n          /* associa this ao connection, e não ao close */\n          close = connection.close.bind(connection);\n\n          connection.close = function() {\n            throw new Error(\"Você não pode fechar essa conexão diretamente.\");\n          };\n        }\n\n        resolve(connection);\n      };\n\n      openRequest.onerror = e => {\n        console.log(e.target.error);\n        reject(e.target.error.name);\n      };\n    });\n  }\n\n  static _createStore(connection) {\n    stores.forEach(store => {\n      if (connection.objectStoreNames.contains(store))\n        connection.deleteObjectStore(store);\n    });\n    connection.createObjectStore(stores, { autoIncrement: true });\n  }\n\n  static _closeConnection() {\n    if (connection) {\n      close();\n      connection = null;\n    }\n  }\n}\n"]}